name: Pull Request Tests

on:
  pull_request:
    branches: [ main, map_on_dope ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write

jobs:
  test-pr:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-pr-${{ hashFiles('**/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-html
        
    - name: Create test environment
      run: |
        mkdir -p .streamlit
        cat > .streamlit/secrets.toml << EOF
        [supabase]
        url = "https://test.supabase.co"
        key = "test-key"
        bucket = "test-bucket"
        
        [auth0]
        domain = "test.auth0.com"
        client_id = "test-client-id"
        client_secret = "test-client-secret"
        EOF
        
    - name: Run fast test suite
      id: tests
      run: |
        echo "Running PR validation tests..."
        
        # Run structural tests first (fastest)
        python test_all_pages.py > test_output.txt 2>&1
        STRUCTURAL_EXIT_CODE=$?
        
        # Run modular tests
        python run_all_tests.py >> test_output.txt 2>&1
        MODULAR_EXIT_CODE=$?
        
        # Calculate test results
        TOTAL_TESTS=$(grep -o "Ran [0-9]* tests" test_output.txt | tail -1 | grep -o "[0-9]*" || echo "0")
        FAILURES=$(grep -o "[0-9]* test.*failed" test_output.txt | grep -o "^[0-9]*" || echo "0")
        ERRORS=$(grep -o "[0-9]* test.*error" test_output.txt | grep -o "^[0-9]*" || echo "0")
        
        echo "TOTAL_TESTS=$TOTAL_TESTS" >> $GITHUB_ENV
        echo "FAILURES=$FAILURES" >> $GITHUB_ENV
        echo "ERRORS=$ERRORS" >> $GITHUB_ENV
        
        # Set overall exit code
        if [ $STRUCTURAL_EXIT_CODE -eq 0 ] && [ $MODULAR_EXIT_CODE -eq 0 ]; then
          echo "TEST_STATUS=success" >> $GITHUB_ENV
          exit 0
        else
          echo "TEST_STATUS=failure" >> $GITHUB_ENV
          exit 1
        fi
        
    - name: Upload test output
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-test-output
        path: test_output.txt
        
    - name: Comment test results on PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const testStatus = process.env.TEST_STATUS;
          const totalTests = process.env.TOTAL_TESTS || '0';
          const failures = process.env.FAILURES || '0';
          const errors = process.env.ERRORS || '0';
          
          const passed = parseInt(totalTests) - parseInt(failures) - parseInt(errors);
          const successRate = totalTests > 0 ? Math.round((passed / parseInt(totalTests)) * 100) : 0;
          
          const statusEmoji = testStatus === 'success' ? '‚úÖ' : '‚ùå';
          const rateEmoji = successRate >= 90 ? 'üéâ' : successRate >= 80 ? '‚úÖ' : successRate >= 70 ? '‚ö†Ô∏è' : '‚ùå';
          
          const body = `## ${statusEmoji} PR Test Results
          
          **Test Summary:**
          - **Total Tests:** ${totalTests}
          - **Passed:** ${passed}
          - **Failed:** ${failures}
          - **Errors:** ${errors}
          - **Success Rate:** ${rateEmoji} ${successRate}%
          
          ${testStatus === 'success' 
            ? 'üéâ All tests are passing! This PR is ready for review.' 
            : '‚ö†Ô∏è Some tests are failing. Please check the test output and fix any issues before merging.'}
          
          <details>
          <summary>üìã Test Details</summary>
          
          This PR has been automatically tested against the ChronoLog test suite:
          - Structural validation tests
          - Modular component tests  
          - Page functionality tests
          - Data model tests
          
          Check the Actions tab for detailed test logs and artifacts.
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
          
    - name: Set PR status check
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const testStatus = process.env.TEST_STATUS;
          const state = testStatus === 'success' ? 'success' : 'failure';
          const description = testStatus === 'success' 
            ? 'All tests passed successfully' 
            : 'Some tests failed - check details';
            
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: state,
            target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
            description: description,
            context: 'PR Tests'
          });