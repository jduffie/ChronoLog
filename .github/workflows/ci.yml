name: CI/CD Pipeline

on:
  push:
    branches: [ main, map_on_dope, develop ]
  pull_request:
    branches: [ main, map_on_dope ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html pytest-xdist
        
    - name: Create test environment file
      run: |
        echo "Creating mock environment for tests..."
        mkdir -p .streamlit
        cat > .streamlit/secrets.toml << EOF
        [supabase]
        url = "https://test.supabase.co"
        key = "test-key"
        bucket = "test-bucket"
        
        [auth0]
        domain = "test.auth0.com"
        client_id = "test-client-id"
        client_secret = "test-client-secret"
        EOF
        
    - name: Run structural tests
      run: |
        echo "Running structural validation tests..."
        python test_all_pages.py
        
    - name: Run modular tests
      run: |
        echo "Running modular test suite..."
        python run_all_tests.py
        
    - name: Run tests with pytest and coverage
      run: |
        echo "Running pytest with coverage..."
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing \
               --html=test-report.html --self-contained-html \
               chronograph/test_chronograph.py \
               dope/test_dope.py \
               ammo/test_ammo.py \
               rifles/test_rifles.py \
               mapping/test_mapping.py \
               test_all_pages.py \
               -v
               
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-report.html
          htmlcov/
          coverage.xml
          
    - name: Comment test results on PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          try {
            const testOutput = fs.readFileSync('test-report.html', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🧪 Test Results\n\nTest report has been generated and uploaded as an artifact. Check the Actions tab for detailed results.'
            });
          } catch (error) {
            console.log('Could not read test report:', error.message);
          }

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Run Black formatter check
      run: |
        black --check --diff .
        
    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .
        
    - name: Run flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run mypy type checking
      run: |
        mypy . --ignore-missing-imports --exclude venv/ --exclude .github/ || true

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Bandit security linter
      uses: securecodewarrior/github-action-bandit@v1
      with:
        severity: medium
        confidence: medium
        exit_zero: true
        
    - name: Run Safety check for vulnerabilities
      run: |
        python -m pip install --upgrade pip safety
        safety check --ignore 70612 || true

  build-status:
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ Tests passed"
        else
          echo "❌ Tests failed"
        fi
        
        if [ "${{ needs.lint.result }}" == "success" ]; then
          echo "✅ Linting passed"
        else
          echo "⚠️ Linting issues found"
        fi
        
        if [ "${{ needs.security.result }}" == "success" ]; then
          echo "✅ Security checks passed"
        else
          echo "⚠️ Security issues found"
        fi
        
        echo "Build completed with status: ${{ needs.test.result }}"