from dataclasses import dataclass
from datetime import datetime
from typing import List, Optional

import pandas as pd


@dataclass
class WeatherSource:
    """Entity representing a weather meter/device"""

    id: str
    user_id: str
    name: str
    source_type: str = "meter"
    device_name: Optional[str] = None
    make: Optional[str] = None
    model: Optional[str] = None
    serial_number: Optional[str] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    @classmethod
    def from_device_info(
        cls,
        user_id: str,
        name: str,
        device_name: str = None,
        device_model: str = None,
        serial_number: str = None,
    ) -> "WeatherSource":
        """Create a WeatherSource from device information"""
        return cls(
            id="",  # Will be generated by database
            user_id=user_id,
            name=name,
            device_name=device_name,
            make=None,  # Can be set later
            model=device_model,
            serial_number=serial_number,
        )

    @classmethod
    def from_supabase_record(cls, record: dict) -> "WeatherSource":
        """Create a WeatherSource from a Supabase record"""
        return cls(
            id=record["id"],
            user_id=record["user_id"],
            name=record["name"],
            source_type=record.get("source_type", "meter"),
            device_name=record.get("device_name"),
            make=record.get("make"),
            model=record.get("model"),
            serial_number=record.get("serial_number"),
            created_at=(
                pd.to_datetime(record["created_at"])
                if record.get("created_at")
                else None
            ),
            updated_at=(
                pd.to_datetime(record["updated_at"])
                if record.get("updated_at")
                else None
            ),
        )

    @classmethod
    def from_supabase_records(
            cls, records: List[dict]) -> List["WeatherSource"]:
        """Create a list of WeatherSource objects from Supabase records"""
        return [cls.from_supabase_record(record) for record in records]

    def display_name(self) -> str:
        """Get a display-friendly name for the weather source"""
        return self.name

    def device_display(self) -> str:
        """Get a display-friendly device description"""
        if self.make and self.model:
            desc = f"{self.make} {self.model}"
        elif self.device_name:
            desc = self.device_name
        elif self.model:
            desc = self.model
        else:
            desc = "Unknown Device"

        if self.serial_number:
            desc += f" (S/N: {self.serial_number})"

        return desc

    def short_display(self) -> str:
        """Get a short display name for dropdowns/lists"""
        return f"{self.name} - {self.device_display()}"


@dataclass
class WeatherMeasurement:
    """Entity representing a single weather measurement"""

    id: str
    user_id: str
    weather_source_id: str
    measurement_timestamp: datetime
    uploaded_at: datetime
    file_path: Optional[str] = None

    # Weather measurements - Metric units only
    temperature_c: Optional[float] = None
    wet_bulb_temp_c: Optional[float] = None
    relative_humidity_pct: Optional[float] = None
    barometric_pressure_hpa: Optional[float] = None
    altitude_m: Optional[float] = None
    station_pressure_hpa: Optional[float] = None
    wind_speed_mps: Optional[float] = None
    heat_index_c: Optional[float] = None
    dew_point_c: Optional[float] = None
    density_altitude_m: Optional[float] = None
    crosswind_mps: Optional[float] = None
    headwind_mps: Optional[float] = None
    compass_magnetic_deg: Optional[float] = None
    compass_true_deg: Optional[float] = None
    wind_chill_c: Optional[float] = None

    # Additional fields
    data_type: Optional[str] = None
    record_name: Optional[str] = None
    start_time: Optional[str] = None
    duration: Optional[str] = None
    location_description: Optional[str] = None
    location_address: Optional[str] = None
    location_coordinates: Optional[str] = None
    notes: Optional[str] = None

    @classmethod
    def from_supabase_record(cls, record: dict) -> "WeatherMeasurement":
        """Create a WeatherMeasurement from a Supabase record"""
        return cls(
            id=record["id"],
            user_id=record["user_id"],
            weather_source_id=record["weather_source_id"],
            measurement_timestamp=pd.to_datetime(
                record["measurement_timestamp"]),
            uploaded_at=pd.to_datetime(record["uploaded_at"]),
            file_path=record.get("file_path"),
            # Metric units only
            temperature_c=record.get("temperature_c"),
            wet_bulb_temp_c=record.get("wet_bulb_temp_c"),
            relative_humidity_pct=record.get("relative_humidity_pct"),
            barometric_pressure_hpa=record.get("barometric_pressure_hpa"),
            altitude_m=record.get("altitude_m"),
            station_pressure_hpa=record.get("station_pressure_hpa"),
            wind_speed_mps=record.get("wind_speed_mps"),
            heat_index_c=record.get("heat_index_c"),
            dew_point_c=record.get("dew_point_c"),
            density_altitude_m=record.get("density_altitude_m"),
            crosswind_mps=record.get("crosswind_mps"),
            headwind_mps=record.get("headwind_mps"),
            compass_magnetic_deg=record.get("compass_magnetic_deg"),
            compass_true_deg=record.get("compass_true_deg"),
            wind_chill_c=record.get("wind_chill_c"),
            # Additional fields
            data_type=record.get("data_type"),
            record_name=record.get("record_name"),
            start_time=record.get("start_time"),
            duration=record.get("duration"),
            location_description=record.get("location_description"),
            location_address=record.get("location_address"),
            location_coordinates=record.get("location_coordinates"),
            notes=record.get("notes"),
        )

    @classmethod
    def from_supabase_records(
            cls, records: List[dict]) -> List["WeatherMeasurement"]:
        """Create a list of WeatherMeasurement objects from Supabase records"""
        return [cls.from_supabase_record(record) for record in records]


    def has_wind_data(self) -> bool:
        """Check if measurement has wind data"""
        return any(
            [
                self.wind_speed_mps is not None,
                self.crosswind_mps is not None,
                self.headwind_mps is not None,
                self.compass_magnetic_deg is not None,
                self.compass_true_deg is not None,
            ]
        )

    def has_location_data(self) -> bool:
        """Check if measurement has location data"""
        return any(
            [
                self.location_description,
                self.location_address,
                self.location_coordinates,
            ]
        )
